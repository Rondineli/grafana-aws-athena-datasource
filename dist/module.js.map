{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./config_ctrl.ts","webpack:///./datasource.ts","webpack:///./module.ts","webpack:///./query_ctrl.ts"],"names":[],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./module.ts\");\n","export class AwsAthenaDatasourceConfigCtrl {\n  current: any;\n  accessKeyExist: any;\n  secretKeyExist: any;\n  datasourceSrv: any;\n  authTypes: any;\n  static templateUrl = 'partials/config.html';\n\n  /** @ngInject */\n  constructor($scope, datasourceSrv) {\n    this.current.jsonData.authType = this.current.jsonData.authType || 'credentials';\n\n    this.accessKeyExist = this.current.secureJsonFields.accessKey;\n    this.secretKeyExist = this.current.secureJsonFields.secretKey;\n    this.datasourceSrv = datasourceSrv;\n    this.authTypes = [\n      { name: 'Access & secret key', value: 'keys' },\n      { name: 'Credentials file', value: 'credentials' },\n      { name: 'ARN', value: 'arn' },\n    ];\n  }\n\n  resetAccessKey() {\n    this.accessKeyExist = false;\n  }\n\n  resetSecretKey() {\n    this.secretKeyExist = false;\n  }\n}\n","import _ from \"lodash\";\nimport TableModel from 'grafana/app/core/table_model';\n\nexport class AwsAthenaDatasource {\n  type: string;\n  url: string;\n  name: string;\n  id: string;\n  defaultRegion: string;\n  q: any;\n  $q: any;\n  backendSrv: any;\n  templateSrv: any;\n  timeSrv: any;\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n  }\n\n  query(options) {\n    let query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    return this.doRequest({\n      data: query\n    });\n  }\n\n  testDatasource() {\n    return this.doMetricQueryRequest('named_query_names', {\n      region: this.defaultRegion,\n    }).then(res => {\n      return this.q.when({ status: \"success\", message: \"Data source is working\", title: \"Success\" });\n    }).catch(err => {\n      return { status: \"error\", message: err.message, title: \"Error\" };\n    });\n  }\n\n  doRequest(options) {\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.data.range.from.valueOf().toString(),\n        to: options.data.range.to.valueOf().toString(),\n        queries: options.data.targets,\n      }\n    }).then(result => {\n      let res: any = [];\n      for (const query of options.data.targets) {\n        const r = result.data.results[query.refId];\n        if (!_.isEmpty(r.series)) {\n          _.forEach(r.series, s => {\n            res.push({ target: s.name, datapoints: s.points });\n          });\n        }\n        if (!_.isEmpty(r.tables)) {\n          _.forEach(r.tables, t => {\n            let table = new TableModel();\n            table.columns = t.columns;\n            table.rows = t.rows;\n            res.push(table);\n          });\n        }\n      }\n\n      result.data = res;\n      return result;\n    });\n  }\n\n  buildQueryParameters(options) {\n    let targets = _.map(options.targets, target => {\n      return {\n        refId: target.refId,\n        hide: target.hide,\n        datasourceId: this.id,\n        queryType: 'timeSeriesQuery',\n        format: target.format || 'timeserie',\n        region: this.templateSrv.replace(target.region, options.scopedVars) || this.defaultRegion,\n        timestampColumn: target.timestampColumn,\n        valueColumn: target.valueColumn,\n        legendFormat: target.legendFormat || '',\n        inputs: this.templateSrv.replace(target.queryExecutionId, options.scopedVars).split(/,/).map((id) => {\n          return {\n            queryExecutionId: id\n          };\n        })\n      };\n    });\n\n    options.targets = targets;\n    return options;\n  }\n\n  metricFindQuery(query) {\n    let region;\n\n    let namedQueryNamesQuery = query.match(/^named_query_names\\(([^\\)]+?)\\)/);\n    if (namedQueryNamesQuery) {\n      region = namedQueryNamesQuery[1];\n      return this.doMetricQueryRequest('named_query_names', {\n        region: this.templateSrv.replace(region),\n      });\n    }\n\n    let namedQueryQueryQuery = query.match(/^named_query_queries\\(([^,]+?),\\s?(.+)\\)/);\n    if (namedQueryQueryQuery) {\n      region = namedQueryQueryQuery[1];\n      let pattern = namedQueryQueryQuery[2];\n      return this.doMetricQueryRequest('named_query_queries', {\n        region: this.templateSrv.replace(region),\n        pattern: this.templateSrv.replace(pattern, {}, 'regex'),\n      });\n    }\n\n    let queryExecutionIdsQuery = query.match(/^query_execution_ids\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+)(,\\s?.+)?\\)/);\n    if (queryExecutionIdsQuery) {\n      region = queryExecutionIdsQuery[1];\n      let limit = queryExecutionIdsQuery[2];\n      let pattern = queryExecutionIdsQuery[3];\n      let workGroup = queryExecutionIdsQuery[4];\n      if (workGroup) {\n        workGroup = workGroup.substr(1); //remove the comma\n        workGroup = workGroup.trim();\n      } else {\n        workGroup = null\n      }\n\n      return this.doMetricQueryRequest('query_execution_ids', {\n        region: this.templateSrv.replace(region),\n        limit: parseInt(this.templateSrv.replace(limit), 10),\n        pattern: this.templateSrv.replace(pattern, {}, 'regex'),\n        work_group: this.templateSrv.replace(workGroup),\n      });\n    }\n\n    return this.q.when([]);\n  }\n\n  doMetricQueryRequest(subtype, parameters) {\n    var range = this.timeSrv.timeRange();\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: range.from.valueOf().toString(),\n        to: range.to.valueOf().toString(),\n        queries: [\n          _.extend(\n            {\n              refId: 'metricFindQuery',\n              datasourceId: this.id,\n              queryType: 'metricFindQuery',\n              subtype: subtype,\n            },\n            parameters\n          ),\n        ],\n      }\n    }).then(r => {\n      return this.transformSuggestDataFromTable(r.data);\n    });\n  }\n\n  transformSuggestDataFromTable(suggestData) {\n    return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\n      return {\n        text: v[0],\n        value: v[1],\n      };\n    });\n  }\n}\n","import { AwsAthenaDatasource } from './datasource';\nimport { AwsAthenaDatasourceQueryCtrl } from './query_ctrl';\nimport { AwsAthenaDatasourceConfigCtrl } from './config_ctrl';\n\nexport {\n  AwsAthenaDatasource as Datasource,\n  AwsAthenaDatasourceQueryCtrl as QueryCtrl,\n  AwsAthenaDatasourceConfigCtrl as ConfigCtrl\n};\n","import { QueryCtrl } from 'grafana/app/plugins/sdk';\n\nexport class AwsAthenaDatasourceQueryCtrl extends QueryCtrl {\n  scope: any;\n  target: any;\n  panelCtrl: any;\n  static templateUrl = 'partials/query.editor.html';\n\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.target.format = this.target.format || this.target.type || 'timeserie';\n    this.target.region = this.target.region || '';\n    this.target.timestampColumn = this.target.timestampColumn || '';\n    this.target.valueColumn = this.target.valueColumn || '';\n    this.target.legendFormat = this.target.legendFormat || '';\n    this.target.queryExecutionId = this.target.queryExecutionId || '';\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh();\n  }\n}\n\n"],"sourceRoot":""}